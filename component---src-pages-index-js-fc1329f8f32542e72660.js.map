{"version":3,"sources":["webpack:///./src/images/phone-ios.png","webpack:///./src/images/phone-android.png","webpack:///./src/utils/shuffleArray.js","webpack:///./src/utils/loadImage.js","webpack:///./src/components/packshot.js","webpack:///./src/pages/index.js"],"names":["module","exports","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","loadImage","url","Promise","resolve","image","Image","addEventListener","src","Packshot","sloganDuration","slogans","appLinks","shuffledSlogans","useState","init","setInit","currentSlogan","useRef","sloganByLine","current","split","sloganState","setSloganState","prevSloganState","useEffect","isActual","all","phoneIosImage","phoneAndroidImage","then","delay","setTimeout","clearTimeout","nextState","lifetime","className","styles","root","container","cn","slogan","sloganHidden","map","line","key","appLinksHidden","product","productHidden","productAndroid","productIos","defaultProps","IndexPage","pageConfig","description","appStore","googlePlay","footerLogoLink","footer"],"mappings":"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","file":"component---src-pages-index-js-fc1329f8f32542e72660.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/phone-ios-ac683f3a41bf4577b27cd23b000c8047.png\";","module.exports = __webpack_public_path__ + \"static/phone-android-dc613b0f8daec3e5f2dd7418894b390c.png\";","/**\n * Shuffle array (Fisherâ€“Yates shuffle)\n * @param {array} array\n * @returns {array} shuffledArray\n */\n\nconst shuffleArray = array => {\n    const shuffledArray = [...array];\n\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n\n        [shuffledArray[i], shuffledArray[j]] = [\n            shuffledArray[j],\n            shuffledArray[i],\n        ];\n    }\n\n    return shuffledArray;\n};\n\nexport default shuffleArray;\n","/**\n * Load image\n * @param {string} url\n * @returns {Object} shuffledArray\n */\n\nconst loadImage = url =>\n    new Promise(resolve => {\n        const image = new Image();\n\n        image.addEventListener('load', () => {\n            resolve(image);\n        });\n\n        image.src = url;\n    });\n\nexport default loadImage;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport AppLinks from './appLinks';\nimport Container from '../components/container';\nimport shuffleArray from '../utils/shuffleArray';\nimport loadImage from '../utils/loadImage';\nimport styles from './packshot.module.scss';\nimport phoneIosImage from '../images/phone-ios.png';\nimport phoneAndroidImage from '../images/phone-android.png';\n\nconst Packshot = ({ sloganDuration, slogans, appLinks }) => {\n    const [shuffledSlogans] = useState(() => {\n        return shuffleArray(slogans);\n    });\n    const [init, setInit] = useState(true);\n    const currentSlogan = useRef(0);\n    const sloganByLine = shuffledSlogans[currentSlogan.current].split('\\n');\n    const [sloganState, setSloganState] = useState(null);\n    const prevSloganState = useRef(null);\n\n    // Init\n    useEffect(() => {\n        let isActual = true;\n\n        Promise.all([\n            loadImage(phoneIosImage),\n            loadImage(phoneAndroidImage),\n        ]).then(() => {\n            if (isActual) {\n                setInit(false); // On init\n            }\n        });\n\n        return () => {\n            isActual = false;\n        };\n    }, []);\n\n    // If init finished\n    useEffect(() => {\n        if (init) {\n            return;\n        }\n\n        const delay = setTimeout(() => {\n            setSloganState('Out'); // Start slogans changing\n        }, sloganDuration);\n\n        return () => {\n            clearTimeout(delay);\n        };\n    }, [init, sloganDuration]);\n\n    // Slogans changing\n    useEffect(() => {\n        if (prevSloganState.current === sloganState) {\n            return;\n        }\n\n        let nextState;\n        let lifetime;\n\n        prevSloganState.current = sloganState;\n\n        if (sloganState === 'In') {\n            nextState = 'Active';\n            lifetime = 200;\n        } else if (sloganState === 'Active') {\n            nextState = 'Out';\n            lifetime = sloganDuration;\n        } else if (sloganState === 'Out') {\n            nextState = 'In';\n            lifetime = 400;\n        }\n\n        const delay = setTimeout(() => {\n            if (sloganState === 'Out') {\n                currentSlogan.current =\n                    currentSlogan.current >= shuffledSlogans.length - 1\n                        ? 0\n                        : currentSlogan.current + 1;\n            }\n\n            setSloganState(nextState);\n        }, lifetime);\n\n        return () => {\n            clearTimeout(delay);\n        };\n    }, [sloganState, sloganDuration, currentSlogan, shuffledSlogans.length]);\n\n    return (\n        <div className={styles.root}>\n            <Container className={styles.container}>\n                <div\n                    className={cn([\n                        styles.slogan,\n                        {\n                            [styles.sloganHidden]: init,\n                            [styles[`slogan${sloganState}`]]: sloganState,\n                        },\n                    ])}\n                >\n                    <div>Keep calm</div>\n                    {sloganByLine.map(line => {\n                        return <div key={line}>{line}</div>;\n                    })}\n                </div>\n\n                <AppLinks\n                    className={cn([\n                        styles.appLinks,\n                        { [styles.appLinksHidden]: init },\n                        'd-md-none',\n                    ])}\n                    appLinks={appLinks}\n                />\n            </Container>\n\n            <div\n                className={cn([\n                    styles.product,\n                    { [styles.productHidden]: init },\n                ])}\n            >\n                <div className={styles.productAndroid} />\n                <div className={styles.productIos} />\n            </div>\n        </div>\n    );\n};\n\nPackshot.propTypes = {\n    sloganDuration: PropTypes.number,\n    slogans: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nPackshot.defaultProps = {\n    sloganDuration: 6000,\n};\n\nexport default Packshot;\n","import React from 'react';\n\nimport LayoutMain from '../components/layoutMain';\nimport Packshot from '../components/packshot';\n\nconst IndexPage = () => {\n    const pageConfig = {\n        description:\n            'Applications for anonymous story publishing and discussion',\n        appLinks: {\n            appStore: 'https://apple.com',\n            googlePlay: 'https://google.com',\n        },\n        footerLogoLink: 'https://yandex.ru',\n        sloganDuration: 6000,\n        slogans: [\n            `you are\n            anonymous`,\n\n            `& discuss other\n            people's stories`,\n\n            `& Write your\n            own story`,\n        ],\n    };\n\n    return (\n        <LayoutMain\n            footer\n            description={pageConfig.description}\n            appLinks={pageConfig.appLinks}\n            footerLogoLink={pageConfig.footerLogoLink}\n        >\n            <Packshot\n                sloganDuration={pageConfig.sloganDuration}\n                appLinks={pageConfig.appLinks}\n                slogans={pageConfig.slogans}\n            />\n        </LayoutMain>\n    );\n};\n\nexport default IndexPage;\n"],"sourceRoot":""}